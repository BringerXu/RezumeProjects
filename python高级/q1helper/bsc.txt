# Setup
c-->from importlib import reload
c-->import q1solution
c-->reload(q1solution)
c-->from q1solution import err, rank, who, by_job, scramble, longest_match 

# Test err
c-->def r(t): return (round(t[0],5),round(t[1],5))
c-->f = err(lambda x : x, .1)
e-->[r(f(x)) for x in irange(-1,1)]-->[(-1.1, -0.9), (0.0, 0.0), (0.9, 1.1)]
c-->f = err(lambda x : x**2 - 1.5 , .01)
e-->[r(f(2*x)) for x in irange(0,2)]-->[(-1.515, -1.485), (2.475, 2.525), (14.355, 14.645)]

# Test rank
c-->db = {'Amy': {}, 'Bob': {('Gardening', 2), ('Tutoring', 1), ('Cleaning',3)}, 'Cindy': {('Plumbing', 2),  ('Cleaning', 5)}, 'David': {('Laundry', 2),   ('Cleaning', 4), ('Gardening', 3)}}
c-->answer = rank(db)
e-->set(answer)==set(db) and all(len(db[p1]) >= len(db[p2]) for p1,p2 in zip(answer,answer[1:]))-->True 
c-->db = {'Amy': {('Cleaning', 4),  ('Tutoring', 2), ('Baking', 1)}, 'Bob': {('Gardening', 2), ('Tutoring', 1), ('Cleaning',3)}, 'Cindy': {('Plumbing', 2),  ('Cleaning', 5)}, 'David':   {('Laundry', 2),   ('Cleaning', 4), ('Gardening', 3)}}
c-->answer = rank(db)
e-->set(answer)==set(db) and all(len(db[p1]) >= len(db[p2]) for p1,p2 in zip(answer,answer[1:]))-->True 

# Test who
c-->db = {'Amy': {('Cleaning', 4),  ('Tutoring', 2), ('Baking', 1)}, 'Bob': {('Gardening', 2), ('Tutoring', 1), ('Cleaning',3)}, 'Cindy': {('Plumbing', 2),  ('Cleaning', 5)}, 'David':   {('Laundry', 2),   ('Cleaning', 4), ('Gardening', 3)}}
e-->who(db,'Cleaning' ,4)-->[('Cindy', 5), ('Amy', 4), ('David', 4)]
e-->who(db,'Gardening',0)-->[('David', 3), ('Bob', 2)]
e-->who(db,'Tutoring', 3)-->[]
e-->who(db,'Gambling', 0)-->[]
^-->who(db,'Gardening','x')-->AssertionError
^-->who(db,'Gardening',-1)-->AssertionError

# Test by_job
c-->db = {'Amy': {}, 'Bob': {('Cleaning', 4),  ('Tutoring', 2), ('Baking', 1)}, 'Cindy': {('Laundry', 2)},'David': {('Gardening', 2), ('Tutoring', 1)}}
==-->by_job(db)-->{'Cleaning': {('Bob', 4)}, 'Tutoring': {('David', 1), ('Bob', 2)}, 'Baking': {('Bob', 1)}, 'Laundry': {('Cindy', 2)}, 'Gardening': {('David', 2)}}
c-->db = {'Amy': {('Cleaning', 4),  ('Tutoring', 2), ('Baking', 1)}, 'Bob': {('Gardening', 2), ('Tutoring', 1), ('Cleaning',3)}, 'Cindy': {('Plumbing', 2),  ('Cleaning', 5)}, 'David':   {('Laundry', 2),   ('Cleaning', 4), ('Gardening', 3)}}
==-->by_job(db)-->{'Cleaning': {('Bob', 3), ('Cindy', 5), ('David', 4), ('Amy', 4)}, 'Tutoring': {('Amy', 2), ('Bob', 1)}, 'Baking': {('Amy', 1)}, 'Gardening': {('David', 3), ('Bob', 2)}, 'Plumbing': {('Cindy', 2)}, 'Laundry': {('David', 2)}}

# Test scramble
e-->scramble(['xyz', 'yxz', 'xyy'], 'xyz')-->['xyy', 'xyz', 'yxz']
e-->scramble(['xyz', 'yxz', 'xyy'], 'zyx')-->['yxz', 'xyz', 'xyy']
e-->scramble(['xyz', 'yxz', 'xyy'], 'zxy')-->['xyz', 'xyy', 'yxz']
e-->scramble(['ant', 'anti', 'anteater', 'anthem', 'antebellum'], 'abcdefghijklmnopqrstuvwxyz')-->['ant', 'anteater', 'antebellum', 'anthem', 'anti']
e-->scramble(['ant', 'anti', 'anteater', 'anthem', 'antebellum'], 'zyxwvutsrqponmlkjihgfedcba')-->['ant', 'anti', 'anthem', 'antebellum', 'anteater']
e-->scramble(['ant', 'anti', 'anteater', 'anthem', 'antebellum'], 'gbomzftrpjxqycdewvlknisuha')-->['ant', 'antebellum', 'anteater', 'anti', 'anthem']

# Test longest_match
e-->longest_match('tggca','t')-->(0, 1)
e-->longest_match('tggca','ggc')-->(1, 3)
e-->longest_match('tggca','ta')-->(0, 1)
e-->longest_match('tggca','ggca')-->(1, 4)
e-->longest_match('tggca','x')-->(0, 0)
e-->longest_match('gggtggcggc','ggca')-->(4, 3)
e-->longest_match('gggtggcaggc','ggca')-->(4, 4)
